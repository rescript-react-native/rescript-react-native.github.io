"use strict";(self.webpackChunkrescript_react_native_github_io=self.webpackChunkrescript_react_native_github_io||[]).push([[9286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=s(n),d=r,m=g["".concat(c,".").concat(d)]||g[d]||u[d]||a;return n?o.createElement(m,i(i({ref:t},p),{},{components:n})):o.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[g]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={id:"logbox",title:"LogBox",officialDoc:"https://reactnative.dev/docs/debugging#logbox"},i=void 0,l={unversionedId:"logbox",id:"logbox",title:"LogBox",description:"Errors and warnings in development builds are displayed in LogBox inside your app.",source:"@site/docs/logbox.md",sourceDirName:".",slug:"/logbox",permalink:"/docs/logbox",draft:!1,editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/logbox.md",tags:[],version:"current",frontMatter:{id:"logbox",title:"LogBox",officialDoc:"https://reactnative.dev/docs/debugging#logbox"}},c={},s=[{value:"<code>ignoreLogs</code>",id:"ignorelogs",level:2},{value:"<code>ignoreAllLogs</code>",id:"ignorealllogs",level:2}],p={toc:s},g="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Errors and warnings in development builds are displayed in LogBox inside your app."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"LogBox is automatically disabled in release (production) builds.")),(0,r.kt)("h2",{id:"ignorelogs"},(0,r.kt)("inlineCode",{parentName:"h2"},"ignoreLogs")),(0,r.kt)("p",null,"Console errors and warnings are displayed as on-screen notifications with a red or yellow badge, and the number of errors or warning in the console respectively. To view a console error or warnings, tap the notification to view the full screen information about the log and to paginiate through all of the logs in the console."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"type signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"ignoreLogs: array(string) => unit\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},'open ReactNative\n\nLogBox.ignoreLogs([\n  "Require cycle:",\n  "Remote debugger",\n  "Accessing view manager configs",\n  "Warning: componentWillReceiveProps",\n  "Warning: componentWillMount",\n])\n')),(0,r.kt)("h2",{id:"ignorealllogs"},(0,r.kt)("inlineCode",{parentName:"h2"},"ignoreAllLogs")),(0,r.kt)("p",null,"These notifications can be hidden using ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactNative.LogBox.ignoreAllLogs()"),". This is useful when giving product demos, for example. Additionally, notifications can be hidden on a per-log basis via ",(0,r.kt)("inlineCode",{parentName:"p"},'ReactNative.LogBox.ignoreLogs([|"Require cycle:"|])'),". This is useful when there's a noisy warning that cannot be fixed, like those in a third-party dependency."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ignore logs as a last resort and create a task to fix any logs that are ignored.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"type signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"ignoreAllLogs: unit => unit\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rescript"},"open ReactNative\n\nLogBox.ignoreAllLogs()\n")))}u.isMDXComponent=!0}}]);