"use strict";(self.webpackChunkrescript_react_native_github_io=self.webpackChunkrescript_react_native_github_io||[]).push([[6447],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>k});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),l=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},i=function(e){var n=l(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),c=l(t),m=o,k=c["".concat(d,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(k,p(p({ref:n},i),{},{components:t})):a.createElement(k,p({ref:n},i))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,p=new Array(r);p[0]=m;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[c]="string"==typeof e?e:o,p[1]=s;for(var l=2;l<r;l++)p[l]=t[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var a=t(7462),o=(t(7294),t(3905));const r={id:"panresponder",title:"PanResponder",officialDoc:"https://reactnative.dev/docs/panresponder"},p=void 0,s={unversionedId:"panresponder",id:"panresponder",title:"PanResponder",description:"PanResponder allows more fine-grained control of the",source:"@site/docs/panresponder.md",sourceDirName:".",slug:"/panresponder",permalink:"/docs/panresponder",draft:!1,editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/panresponder.md",tags:[],version:"current",frontMatter:{id:"panresponder",title:"PanResponder",officialDoc:"https://reactnative.dev/docs/panresponder"},sidebar:"api",previous:{title:"Packager",permalink:"/docs/packager"},next:{title:"PermissionsAndroid",permalink:"/docs/permissionsandroid"}},d={},l=[{value:"Types",id:"types",level:2},{value:"<code>Event.pressEvent</code>",id:"eventpressevent",level:3},{value:"<code>gestureState</code>",id:"gesturestate",level:3},{value:"<code>t</code>",id:"t",level:3},{value:"<code>config</code>",id:"config",level:3},{value:"<code>panHandlers</code>",id:"panhandlers",level:3},{value:"<code>callback&lt;&#39;a&gt;</code>",id:"callbacka",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"<code>panHandlers</code>",id:"panhandlers-1",level:3},{value:"<code>onMoveShouldSetResponder</code>",id:"onmoveshouldsetresponder",level:3},{value:"<code>onMoveShouldSetResponderCapture</code>",id:"onmoveshouldsetrespondercapture",level:3},{value:"<code>onStartShouldSetResponder</code>",id:"onstartshouldsetresponder",level:3},{value:"<code>onStartShouldSetResponderCapture</code>",id:"onstartshouldsetrespondercapture",level:3},{value:"<code>onResponderReject</code>",id:"onresponderreject",level:3},{value:"<code>onResponderGrant</code>",id:"onrespondergrant",level:3},{value:"<code>onResponderRelease</code>",id:"onresponderrelease",level:3},{value:"<code>onResponderMove</code>",id:"onrespondermove",level:3},{value:"<code>onResponderTerminate</code>",id:"onresponderterminate",level:3},{value:"<code>onResponderStart</code>",id:"onresponderstart",level:3},{value:"<code>onResponderTerminationRequest</code>",id:"onresponderterminationrequest",level:3},{value:"<code>onResponderEnd</code>",id:"onresponderend",level:3},{value:"Example",id:"example",level:2}],i={toc:l},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder")," allows more fine-grained control of the\n",(0,o.kt)("a",{parentName:"p",href:"https://reactnative.dev/docs/gesture-responder-system"},(0,o.kt)("em",{parentName:"a"},"Gesture Responder System")),",\nas the handlers can depend also on ",(0,o.kt)("inlineCode",{parentName:"p"},"gestureState"),", in addition to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Event.pressEvent")," which are passed to the ",(0,o.kt)("em",{parentName:"p"},"Gesture Responder System")," handlers.\nIn essence, by means of a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder"),", ",(0,o.kt)("em",{parentName:"p"},"Gesture Responder System"),"\nhandlers are extended to also depend upon the ",(0,o.kt)("inlineCode",{parentName:"p"},"gestureState"),"."),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("h3",{id:"eventpressevent"},(0,o.kt)("inlineCode",{parentName:"h3"},"Event.pressEvent")),(0,o.kt)("p",null,"see ",(0,o.kt)("a",{parentName:"p",href:"/docs/event/#pressevent"},(0,o.kt)("inlineCode",{parentName:"a"},"Event"))),(0,o.kt)("h3",{id:"gesturestate"},(0,o.kt)("inlineCode",{parentName:"h3"},"gestureState")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"gestureState")," contains additional information on the state of the ","_","Gesture\nResponder System","_"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"type gestureState = {\n  stateid: float,\n  moveX: float,\n  moveY: float,\n  x0: float,\n  y0: float,\n  dx: float,\n  dy: float,\n  vx: float,\n  vy: float,\n  numberActiveTouches: int,\n}\n")),(0,o.kt)("h3",{id:"t"},(0,o.kt)("inlineCode",{parentName:"h3"},"t")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"t")," is the abstract type for a ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder"),", which can be created by means of\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method, given a ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," object"),(0,o.kt)("h3",{id:"config"},(0,o.kt)("inlineCode",{parentName:"h3"},"config")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"config")," is the abstract type for a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder")," configuration; it can\nbe created by means of the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," constructor"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"config:\n  (\n    ~onMoveShouldSetPanResponder: (Event.pressEvent, gestureState) => bool=?,\n    ~onMoveShouldSetPanResponderCapture: (Event.pressEvent, gestureState) =>\n                                         bool\n                                           =?,\n    ~onStartShouldSetPanResponder: (Event.pressEvent, gestureState) => bool=?,\n    ~onStartShouldSetPanResponderCapture: (Event.pressEvent, gestureState) =>\n                                          bool\n                                            =?,\n    ~onPanResponderReject: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderGrant: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderStart: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderEnd: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderRelease: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderMove: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderTerminate: (Event.pressEvent, gestureState) => unit=?,\n    ~onPanResponderTerminationRequest: (Event.pressEvent, gestureState) => bool\n                                         =?,\n    ~onShouldBlockNativeResponder: (Event.pressEvent, gestureState) => bool=?,\n    unit\n  ) => config\n")),(0,o.kt)("h3",{id:"panhandlers"},(0,o.kt)("inlineCode",{parentName:"h3"},"panHandlers")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," is the abstract type for ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," of a ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder"),", which\ncan be accessed by means of the getter method ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")),(0,o.kt)("h3",{id:"callbacka"},(0,o.kt)("inlineCode",{parentName:"h3"},"callback<'a>")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"callback<'a>")," is the type of the usual callback function specified for each\n",(0,o.kt)("em",{parentName:"p"},"Gesture Responder System")," handler defined as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"type callback<'a> = Event.pressEvent => 'a\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"'a")," is either ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"unit")),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"create"},(0,o.kt)("inlineCode",{parentName:"h3"},"create")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"create")," allows creation of a ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder")," given a ",(0,o.kt)("inlineCode",{parentName:"p"},"config")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"create: config => t\n")),(0,o.kt)("h3",{id:"panhandlers-1"},(0,o.kt)("inlineCode",{parentName:"h3"},"panHandlers")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," is a getter method to access ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," within a ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"panHandlers: t => panHandlers\n")),(0,o.kt)("h3",{id:"onmoveshouldsetresponder"},(0,o.kt)("inlineCode",{parentName:"h3"},"onMoveShouldSetResponder")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onMoveShouldSetResponder")," is a getter method to access the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onMoveShouldSetResponder")," callback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onMoveShouldSetResponder: panHandlers => callback(bool)\n")),(0,o.kt)("h3",{id:"onmoveshouldsetrespondercapture"},(0,o.kt)("inlineCode",{parentName:"h3"},"onMoveShouldSetResponderCapture")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onMoveShouldSetResponderCapture")," is a getter method to access the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onMoveShouldSetResponderCapture")," callback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onMoveShouldSetResponderCapture: panHandlers => callback(bool)\n")),(0,o.kt)("h3",{id:"onstartshouldsetresponder"},(0,o.kt)("inlineCode",{parentName:"h3"},"onStartShouldSetResponder")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onStartShouldSetResponder")," is a getter method to access the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onStartShouldSetResponder")," callback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onStartShouldSetResponder: panHandlers => callback(bool)\n")),(0,o.kt)("h3",{id:"onstartshouldsetrespondercapture"},(0,o.kt)("inlineCode",{parentName:"h3"},"onStartShouldSetResponderCapture")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onStartShouldSetResponderCapture")," is a getter method to access the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onStartShouldSetResponderCapture")," callback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onStartShouldSetResponderCapture: panHandlers => callback(bool)\n")),(0,o.kt)("h3",{id:"onresponderreject"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderReject")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderReject")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderReject"),"\ncallback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderReject: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onrespondergrant"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderGrant")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderGrant")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderGrant")," callback\nof a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderGrant: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onresponderrelease"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderRelease")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderRelease")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderRelease"),"\ncallback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderRelease: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onrespondermove"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderMove")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderMove")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderMove")," callback of\na ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderMove: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onresponderterminate"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderTerminate")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderTerminate")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderTerminate"),"\ncallback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderTerminate: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onresponderstart"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderStart")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderStart")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderStart")," callback\nof a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderStart: panHandlers => callback(unit)\n")),(0,o.kt)("h3",{id:"onresponderterminationrequest"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderTerminationRequest")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderTerminationRequest")," is a getter method to access the\n",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderTerminationRequest")," callback of a ",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderTerminationRequest: panHandlers => callback(bool)\n")),(0,o.kt)("h3",{id:"onresponderend"},(0,o.kt)("inlineCode",{parentName:"h3"},"onResponderEnd")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onResponderEnd")," is a getter method to access the ",(0,o.kt)("inlineCode",{parentName:"p"},"onResponderEnd")," callback of a\n",(0,o.kt)("inlineCode",{parentName:"p"},"panHandlers")," object"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onResponderEnd: panHandlers => callback(unit)\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"As props spread is not possible with the ReScript JSX 3 syntax, each ",(0,o.kt)("em",{parentName:"p"},"Gesture\nResponder System")," callback needs to be separately specified, with the relevant\nvalue obtained by means of the associated getter."),(0,o.kt)("p",null,"While props spread may not be available, copy-paste is probably supported by\nyour editor..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"onMoveShouldSetResponder={\n  panHandlers->PanResponder.onMoveShouldSetResponder\n}\nonMoveShouldSetResponderCapture={\n  panHandlers->PanResponder.onMoveShouldSetResponderCapture\n}\nonStartShouldSetResponder={\n  panHandlers->PanResponder.onStartShouldSetResponder\n}\nonStartShouldSetResponderCapture={\n  panHandlers->PanResponder.onStartShouldSetResponderCapture\n}\nonResponderReject={panHandlers->PanResponder.onResponderReject}\nonResponderGrant={panHandlers->PanResponder.onResponderGrant}\nonResponderRelease={panHandlers->PanResponder.onResponderRelease}\nonResponderMove={panHandlers->PanResponder.onResponderMove}\nonResponderTerminate={panHandlers->PanResponder.onResponderTerminate}\nonResponderStart={panHandlers->PanResponder.onResponderStart}\nonResponderTerminationRequest={\n  panHandlers->PanResponder.onResponderTerminationRequest\n}\nonResponderEnd={panHandlers->PanResponder.onResponderEnd}\n")),(0,o.kt)("p",null,"Then, the custom ",(0,o.kt)("inlineCode",{parentName:"p"},"PanResponder")," can be used as below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},'open ReactNative\n\nlet windowHeight = Dimensions.get(#window).height\nlet windowWidth = Dimensions.get(#window).width\n\nlet containerStyle = {\n  open Style\n  style(\n    ~width=windowWidth->dp,\n    ~height=windowHeight->dp,\n    ~justifyContent=#center,\n    ~alignItems=#center\xe0\n    (),\n  )\n}\n\nlet config = PanResponder.config(\n  ~onMoveShouldSetPanResponder=(_e, _g) => true,\n  ~onPanResponderRelease=(_e, g) =>\n    g["dx"] > 0.\n      ? "You swiped right"->Js.Console.warn\n      : "You swiped left"->Js.Console.warn,\n  (),\n)\n\nlet panResponder = PanResponder.create(config)\n\nlet panHandlers = panResponder->PanResponder.panHandlers\n\n@react.component\nlet make = () =>\n  <View\n    style=containerStyle\n    onMoveShouldSetResponder={panHandlers->PanResponder.onMoveShouldSetResponder}\n    onMoveShouldSetResponderCapture={panHandlers->PanResponder.onMoveShouldSetResponderCapture}\n    onStartShouldSetResponder={panHandlers->PanResponder.onStartShouldSetResponder}\n    onStartShouldSetResponderCapture={panHandlers->PanResponder.onStartShouldSetResponderCapture}\n    onResponderReject={panHandlers->PanResponder.onResponderReject}\n    onResponderGrant={panHandlers->PanResponder.onResponderGrant}\n    onResponderRelease={panHandlers->PanResponder.onResponderRelease}\n    onResponderMove={panHandlers->PanResponder.onResponderMove}\n    onResponderTerminate={panHandlers->PanResponder.onResponderTerminate}\n    onResponderStart={panHandlers->PanResponder.onResponderStart}\n    onResponderTerminationRequest={panHandlers->PanResponder.onResponderTerminationRequest}\n    onResponderEnd={panHandlers->PanResponder.onResponderEnd}>\n    <Text> {"Please swipe"->React.string} </Text>\n  </View>\n')))}u.isMDXComponent=!0}}]);