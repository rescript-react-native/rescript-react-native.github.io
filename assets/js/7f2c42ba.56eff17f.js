"use strict";(self.webpackChunkrescript_react_native_github_io=self.webpackChunkrescript_react_native_github_io||[]).push([[9042],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),f=c(n),u=o,d=f["".concat(p,".").concat(u)]||f[u]||m[u]||a;return n?r.createElement(d,l(l({ref:t},s),{},{components:n})):r.createElement(d,l({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[f]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={id:"platform",title:"Platform",officialDoc:"https://reactnative.dev/docs/platform-specific-code"},l=void 0,i={unversionedId:"platform",id:"platform",title:"Platform",description:"Platform.os",source:"@site/docs/platform.md",sourceDirName:".",slug:"/platform",permalink:"/docs/platform",draft:!1,editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/platform.md",tags:[],version:"current",frontMatter:{id:"platform",title:"Platform",officialDoc:"https://reactnative.dev/docs/platform-specific-code"},sidebar:"api",previous:{title:"PixelRatio",permalink:"/docs/pixelratio"},next:{title:"PlatformColor",permalink:"/docs/platformcolor"}},p={},c=[{value:"<code>Platform.os</code>",id:"platformos",level:2},{value:"<code>Platform.select</code>",id:"platformselect",level:2}],s={toc:c},f="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(f,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"platformos"},(0,o.kt)("inlineCode",{parentName:"h2"},"Platform.os")),(0,o.kt)("p",null,"React Native provides a module that detects the platform in which the app is\nrunning. You can use the detection logic to implement platform-specific code.\nUse this option when only small parts of a component are platform-specific."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},"if Platform.os === Platform.ios {\n  // your code\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Platform.os")," can be"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Platform.ios")," when running on iOS"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Platform.android")," when running on Android."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Platform.web")," when running on the web (via\n",(0,o.kt)("a",{parentName:"li",href:"https://github.com/necolas/react-native-web"},(0,o.kt)("inlineCode",{parentName:"a"},"react-native-web")),").")),(0,o.kt)("p",null,"If you need an unsupported platform, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform.unsafe(string)"),"."),(0,o.kt)("p",null,"For conditional style depending on the platform, you can do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},'let styles = StyleSheet.create({\n  open Style\n  {\n    "wrapper": style(~width=pct(Platform.os == Platform.ios ? 100. : 200.), ()),\n  }\n})\n')),(0,o.kt)("h2",{id:"platformselect"},(0,o.kt)("inlineCode",{parentName:"h2"},"Platform.select")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"\u26a0\ufe0f Unsupported.")),(0,o.kt)("p",null,"This feature isn't relevant with ReScript. Instead you can do the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rescript"},'open Style\nlet styles = {\n  "wrapper": style(\n    ~width=switch Platform.os {\n    | os if os == Platform.ios => 100.\n    | os if os == Platform.android => 200.\n    | os if os == Platform.web => 250.\n    | os if os == Platform.unsafe("windows") => 300.\n    | _ => 150.\n    }->pct,\n    (),\n  ),\n}->StyleSheet.create\n')),(0,o.kt)("p",null,"Also since spreading things in ReScript is not supported (because of the\nunsafety aspect), it's even less relevant to have this binding."))}m.isMDXComponent=!0}}]);