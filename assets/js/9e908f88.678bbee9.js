"use strict";(self.webpackChunkrescript_react_native_github_io=self.webpackChunkrescript_react_native_github_io||[]).push([[1824],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=l,y=d["".concat(s,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function y(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={id:"stylesheet",title:"StyleSheet",officialDoc:"https://reactnative.dev/docs/stylesheet"},i=void 0,o={unversionedId:"stylesheet",id:"stylesheet",title:"StyleSheet",description:"StyleSheet mainly has a method to create an object containing many",source:"@site/docs/stylesheet.md",sourceDirName:".",slug:"/stylesheet",permalink:"/docs/stylesheet",draft:!1,editUrl:"https://github.com/rescript-react-native/rescript-react-native.github.io/edit/src/docs/stylesheet.md",tags:[],version:"current",frontMatter:{id:"stylesheet",title:"StyleSheet",officialDoc:"https://reactnative.dev/docs/stylesheet"},sidebar:"api",previous:{title:"Style",permalink:"/docs/style"},next:{title:"ToastAndroid",permalink:"/docs/toastandroid"}},s={},p=[{value:"Methods",id:"methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"<code>flatten</code>",id:"flatten",level:3},{value:"Constants",id:"constants",level:2},{value:"<code>hairlineWidth</code>",id:"hairlinewidth",level:3},{value:"<code>absoluteFill</code>",id:"absolutefill",level:3},{value:"<code>absoluteFillObject</code>",id:"absolutefillobject",level:3},{value:"Example",id:"example",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"StyleSheet")," mainly has a method to ",(0,l.kt)("a",{parentName:"p",href:"#create"},"create")," an object containing many\nstyles, similar to a CSS StyleSheet. This is helpful to keep style definitions\nat fewer locations, away from the render function. Separating concerns in your\ncode in this manner should help readability. Named styles might also help\ndifferentiate between your components. Finally, allowing components to refer to\nstyles by ID, it also reduces the amount of data transferred over the JS bridge."),(0,l.kt)("p",null,"There is also a ",(0,l.kt)("a",{parentName:"p",href:"#flatten"},(0,l.kt)("inlineCode",{parentName:"a"},"flatten"))," method to merge multiple styles into a\nsingle style and several ",(0,l.kt)("a",{parentName:"p",href:"#constants"},"constants")," for commonly used style\ndefinitions."),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"create"},(0,l.kt)("inlineCode",{parentName:"h3"},"create")),(0,l.kt)("p",null,"Takes and returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Js.t<'a>")," objects, with ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," keys and ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.t")," values.\nIndividual styles can be accessed using ",(0,l.kt)("inlineCode",{parentName:"p"},"##"),", followed by the name specified as\nthe key."),(0,l.kt)("p",null,"Note that using ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.array")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.list")," to pass ",(0,l.kt)("inlineCode",{parentName:"p"},"array<Style.t>")," or\n",(0,l.kt)("inlineCode",{parentName:"p"},"list<Style.t>")," is illegal within a ",(0,l.kt)("inlineCode",{parentName:"p"},"StyleSheet"),", even those are valid ",(0,l.kt)("inlineCode",{parentName:"p"},"style"),"\nprops for components. You may, howevever, use the ",(0,l.kt)("a",{parentName:"p",href:"#flatten"},(0,l.kt)("inlineCode",{parentName:"a"},"flatten"))," method\nto convert ",(0,l.kt)("inlineCode",{parentName:"p"},"array<Style.t>")," into a valid ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.t")," object."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},"create: Js.t<'a> => Js.t<'a>\n")),(0,l.kt)("h3",{id:"flatten"},(0,l.kt)("inlineCode",{parentName:"h3"},"flatten")),(0,l.kt)("p",null,"Takes an array of styles (of type ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.t"),") and returns a single style (also of\ntype ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.t"),"). Creates a ",(0,l.kt)("inlineCode",{parentName:"p"},"Style.t")," object which is valid in a ",(0,l.kt)("inlineCode",{parentName:"p"},"StyleSheet"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},"flatten: array<Style.t> => Style.t\n")),(0,l.kt)("h2",{id:"constants"},"Constants"),(0,l.kt)("h3",{id:"hairlinewidth"},(0,l.kt)("inlineCode",{parentName:"h3"},"hairlineWidth")),(0,l.kt)("p",null,"To ensure the resulting line will look sharp, this specifies an integer number\nof pixels which should approximate the standard thickness of a thin line on the\nplatform given the screen density."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},"hairlineWidth: float\n")),(0,l.kt)("h3",{id:"absolutefill"},(0,l.kt)("inlineCode",{parentName:"h3"},"absoluteFill")),(0,l.kt)("p",null,"This is the style"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n  position: 'absolute',\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0\n}\n")),(0,l.kt)("p",null,"which is frequently used to create overlays. A common use is to add these props\nto a style using the spread operator (",(0,l.kt)("inlineCode",{parentName:"p"},"..."),"), but as ReScript does not allow the\noperator when fields are not explicitly set, you may use the ",(0,l.kt)("inlineCode",{parentName:"p"},"flatten")," method\ninstead."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},"absoluteFill: Style.t\n")),(0,l.kt)("h3",{id:"absolutefillobject"},(0,l.kt)("inlineCode",{parentName:"h3"},"absoluteFillObject")),(0,l.kt)("p",null,"This is identical to ",(0,l.kt)("inlineCode",{parentName:"p"},"absoluteFill")," when used with pure functions."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},"absoluteFillObject: Style.t\n")),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"Please also see the ",(0,l.kt)("a",{parentName:"p",href:"/docs/style/#style-example"},"example")," in documentation of the\n",(0,l.kt)("inlineCode",{parentName:"p"},"Style")," API."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rescript"},'open ReactNative\n\nlet borderStyle = {\n  open Style\n  style(~borderWidth=StyleSheet.hairlineWidth, ())\n}\n\nlet styles = {\n  open Style\n  StyleSheet.create({\n    // style may be defined inline\n    "container": style(~flex=1., ~flexDirection=#column, ()),\n    "screen": style(~width=windowWidth->dp, ()),\n    // or already defined elsewhere\n    "borderStyle": borderStyle,\n    "overlay": StyleSheet.absoluteFill,\n  })\n}\n\nlet flatStyle = StyleSheet.flatten([styles["container"], styles["screen"]])\n')))}u.isMDXComponent=!0}}]);